# def show_vid():      
#     cap1 = cv2.VideoCapture(0)                                 
#     if not cap1.isOpened():                             
#         print("can't open the camera1")
#     # print("yes1")
#     flag1, frame1 = cap1.read()
#     frame1 = cv2.resize(frame1,(600,500))

#     bounding_box = cv2.CascadeClassifier('./haarcascade_frontalface_default.xml')
#     gray_frame = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
#     num_faces = bounding_box.detectMultiScale(gray_frame,scaleFactor=1.3, minNeighbors=5)

#     for (x, y, w, h) in num_faces:
#         cv2.rectangle(frame1, (x, y-50), (x+w, y+h+10), (255, 0, 0), 2)
#         roi_gray_frame = gray_frame[y:y + h, x:x + w]
#         cropped_img = np.expand_dims(np.expand_dims(cv2.resize(roi_gray_frame, (48, 48)), -1), 0)
#         prediction = emotion_model.predict(cropped_img)
        
#         maxindex = int(np.argmax(prediction))
#         # cv2.putText(frame1, emotion_dict[maxindex], (x+20, y-60), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
#         show_text[0]=maxindex
#     if flag1 is None:
#         print ("Major error!")
#     elif flag1:
#         global last_frame1
#         last_frame1 = frame1.copy()
#         pic = cv2.cvtColor(last_frame1, cv2.COLOR_BGR2RGB)     
#         img = Image.fromarray(pic)
#         imgtk = ImageTk.PhotoImage(image=img)
#         lmain.imgtk = imgtk
#         lmain.configure(image=imgtk)
#         lmain.after(10, show_vid)
#     if cv2.waitKey(1) & 0xFF == ord('q'):
#         exit()
#     # print("yes11")